# Universal DataLoader Configuration
# Domain-agnostic configuration for any use case
##############################################################################

# LLM Configuration (configure with your AI endpoint)
llm_config:
  # Environment variables (set these in your environment)
  base_url_env: "OPENAI_BASE_URL"     # Your LLM endpoint URL  
  api_key_env: "OPENAI_API_KEY"       # Your API key
  model_env: "MODEL"                  # Your model name
  
  # Fallback values (used if env vars not set)
  fallback_config:
    base_url: "https://llama-4-scout-17b-16e-w4a16-maas-apicast-production.apps.prod.rhoai.rh-aiservices-bu.com:443/v1"
    api_key: "${OPENAI_API_KEY}"
    model: "llama-4-scout-17b-16e-w4a16"
    timeout: 180

# Data Sources Configuration (easily extensible)
data_sources:
  # Default filesystem source (works with any directory structure)
  primary_data:
    type: "filesystem"
    base_path: "data"  # Change this to your data directory
    file_patterns:
      logs: ["**/*.log", "**/*.txt", "**/logs/*"]
      configs: ["**/*.conf", "**/*.config", "**/*.yaml", "**/*.json", "**/*.xml"]
      documents: ["**/*.md", "**/*.doc", "**/*.pdf"]
      scripts: ["**/*.sh", "**/*.py", "**/*.sql"]
      all_files: ["**/*"]
      
  # Example: Network device configs
  network_devices:
    type: "filesystem"
    base_path: "network_configs"
    file_patterns:
      cisco: ["**/*.cfg", "**/running-config"]
      juniper: ["**/*.conf"]
      logs: ["**/*.log"]
      
  # Example: Application data
  applications:
    type: "filesystem" 
    base_path: "app_data"
    file_patterns:
      logs: ["**/logs/**/*.log"]
      configs: ["**/config/**/*.yaml", "**/config/**/*.json"]
      metrics: ["**/metrics/**/*.json"]
      
  # Example: Security/Incident data (for Graph RAG demos)
  security_data:
    type: "filesystem"
    base_path: "security_incidents"
    file_patterns:
      incidents: ["**/*incident*.txt", "**/*alert*.json"]
      reports: ["**/*report*.md", "**/*analysis*.txt"]
      logs: ["**/security*.log", "**/audit*.log"]
      
  # Example: Documentation/Knowledge base
  documents:
    type: "filesystem"
    base_path: "knowledge_base"
    file_patterns:
      manuals: ["**/*.md", "**/*.txt"]
      procedures: ["**/process_*.md", "**/howto_*.txt"]
      faqs: ["**/faq*.md", "**/qa*.txt"]

# Text Processing Configuration
text_processing:
  chunking:
    max_chunk_size: 2000
    chunk_overlap: 200
    separators: ["\n\n", "\n", " ", ""]
    # RAG-optimized chunking (extend existing)
    strategy: "recursive"  # recursive, semantic, fixed
    preserve_entities: true  # Keep entities together
    context_window: 3        # Sentences of context
    
  # Vector embeddings (new - for RAG)
  embeddings:
    enabled: false           # Set to true when ready for RAG
    model: "text-embedding-ada-002"  # or sentence-transformers
    batch_size: 100
    store_with_graph: true   # Link embeddings to graph nodes
    
  cleaning:
    remove_ansi_codes: true
    normalize_whitespace: true
    remove_empty_lines: true
    
  parsing:
    # Generic log patterns (extend as needed)
    log_patterns:
      timestamp: '%{TIMESTAMP_ISO8601:timestamp}'
      error: '%{WORD:level}.*error.*%{GREEDYDATA:message}'
      warning: '%{WORD:level}.*warn.*%{GREEDYDATA:message}'

# Entity Extraction Configuration
entity_extraction:
  # Generic entities (works for any domain)
  target_entities:
    - "System"
    - "Application" 
    - "Service"
    - "Component"
    - "Event"
    - "Document"
    - "User"
    - "Configuration"
    - "Network"
    - "Database"
    - "Process"
    - "Organization"
    - "Technology"
    - "Location"
    
  # Generic relationships  
  target_relationships:
    - "RUNS"
    - "HOSTS"
    - "CONTAINS"
    - "GENERATES"
    - "EXPERIENCES"
    - "CONNECTED_TO"
    - "DEPENDS_ON"
    - "USES"
    - "ACCESSES"
    - "BELONGS_TO"
    - "AFFECTS"
    - "INVOLVES"
    - "OWNS"
    - "MANAGES"
    
  # Generic properties
  target_properties:
    - "name"
    - "type" 
    - "version"
    - "status"
    - "environment"
    - "location"
    - "timestamp"
    - "severity"
    - "description"
    - "ip_address"
    - "port"
    - "path"
    - "owner"
    - "tags"
    - "priority"

# Processing Pipeline Configuration
pipeline:
  phases:
    ingestion:
      enabled: true
      parallel_processing: true
      max_workers: 4
      
    text_processing:
      enabled: true
      use_open_source_tools: true
      fallback_to_basic: true
      
    ai_extraction:
      enabled: true
      retry_on_failure: true
      max_retries: 3
      batch_processing: true
      
    graph_loading:
      enabled: true
      auto_create_indexes: true
      clear_on_startup: false
      backup_before_clear: true

# Neo4j Database Configuration
neo4j_config:
  # Environment variables (recommended)
  uri_env: "NEO4J_URI"
  username_env: "NEO4J_USERNAME"
  password_env: "NEO4J_PASSWORD"
  database_env: "NEO4J_DATABASE"
  
  # Fallback values
  fallback_config:
    uri: "bolt://localhost:7687"
    username: "neo4j"
    password: "password"
    database: "knowledge_graph"  # Generic database name
    
  # Database management
  management:
    auto_create_database: true
    clear_on_startup: false
    backup_before_clear: true
    max_connections: 50

# Output Configuration
output:
  formats:
    - "knowledge_graph"    # Neo4j graph
    - "json_export"        # JSON files
    - "csv_export"         # CSV files
    
  validation:
    required_fields: ["system_id", "timestamp"]
    data_quality_checks: true

# Environment-specific overrides
environments:
  development:
    pipeline:
      phases:
        ai_extraction:
          batch_processing: false  # Faster feedback in dev
    neo4j_config:
      management:
        clear_on_startup: true     # Clean slate in dev
        
  production:
    pipeline:
      phases:
        ai_extraction:
          batch_processing: true   # Efficiency in prod
          max_retries: 5
    neo4j_config:
      management:
        clear_on_startup: false    # Preserve data in prod
        backup_before_clear: true
        
  testing:
    data_sources:
      primary_data:
        base_path: "test_data"     # Use test data
    neo4j_config:
      fallback_config:
        database: "test_knowledge_graph"
